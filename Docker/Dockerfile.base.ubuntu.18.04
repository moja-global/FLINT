# ==================================================================================================================
#
# Docker to ubuntu 18.04 base image (for required libraries) used by flint docker
#
# Building this Docker:
#   docker build -f Dockerfile.base.ubuntu.18.04 --build-arg NUM_CPU=4 -t moja/baseimage:ubuntu-18.04 .
#
# ==================================================================================================================

# Ubuntu 18.04 Bionic Beaver
FROM ubuntu@sha256:9b1702dcfe32c873a770a32cfd306dd7fc1c4fd134adfb783db68defc8894b3c

LABEL maintainer="info@moja.global"

ARG DEBIAN_FRONTEND=noninteractive

ENV ROOTDIR /usr/local
ENV GDAL_VERSION 2.4.1
ENV CMAKE_VERSION 3.15.0
ENV POCO_VERSION 1.9.2
ENV BOOST_VERSION 1_72_0
ENV BOOST_VERSION_DOT 1.72.0
ENV FMT_VERSION 6.1.2
ENV SQLITE_VERSION 3.31.1

WORKDIR $ROOTDIR/

# Install basic dependencies
RUN apt-get update -y && apt-get install -y --fix-missing --no-install-recommends \
    software-properties-common build-essential ca-certificates \
    libtool automake zlib1g-dev libspatialite-dev pkg-config libsqlite3-dev sqlite3 \
	python3-dev python3-numpy python3-pip openssl libssl-dev libpq-dev \
    libcurl4-gnutls-dev libproj-dev libxml2-dev libexpat-dev libxerces-c-dev \
    libgeos-dev libpoppler-dev \
    git wget bash-completion nasm \
    postgresql-client-10 postgresql-server-dev-10 \
    && apt-get -y autoremove \
	&& 	apt-get clean

# set environment variables
ENV PATH $ROOTDIR/bin:$PATH
ENV LD_LIBRARY_PATH $ROOTDIR/lib:$LD_LIBRARY_PATH
ENV PYTHONPATH $ROOTDIR/lib:$PYTHONPATH

ARG NUM_CPU=1

WORKDIR $ROOTDIR/src

RUN wget https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}.tar.gz \
    && tar xzf cmake-${CMAKE_VERSION}.tar.gz \
    && cd cmake-${CMAKE_VERSION} \
    && ./bootstrap --system-curl --parallel=$NUM_CPU \
    && .$NUM_CPU \
	&& make --quiet install \
	&& make clean \
    && cd ..

# RUN wget https://github.com/azadkuh/sqlite-amalgamation/archive/${SQLITE_VERSION}.tar.gz \
#     && tar -xzf ${SQLITE_VERSION}.tar.gz && mkdir -p sqlite-amalgamation-${SQLITE_VERSION}/build && cd sqlite-amalgamation-${SQLITE_VERSION}/build  \
#     && cmake -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=RELEASE \
# 			-DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON \
#             -DBUILD_SHARED_LIBS=ON \
# 			-DCMAKE_INSTALL_PREFIX=$ROOTDIR .. \
#     && make --quiet -j $NUM_CPU install/strip \
#     && make clean \
#     && cd $ROOTDIR/src

# # fix sqlite include location
# RUN mv $ROOTDIR/include/sqlite3/sqlite3.h  $ROOTDIR/include

RUN wget https://pocoproject.org/releases/poco-${POCO_VERSION}/poco-${POCO_VERSION}-all.tar.gz \
    && tar -xzf poco-${POCO_VERSION}-all.tar.gz && mkdir poco-${POCO_VERSION}-all/cmake-build && cd poco-${POCO_VERSION}-all/cmake-build \
    &&  cmake -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=$ROOTDIR \
            -DPOCO_UNBUNDLED=ON \
            -DPOCO_STATIC=OFF \
            -DENABLE_ENCODINGS=OFF \
            -DENABLE_ENCODINGS_COMPILER=OFF \
            -DENABLE_XML=OFF \
            -DENABLE_JSON=ON \
            -DENABLE_MONGODB=OFF \
            -DENABLE_REDIS=OFF \
            -DENABLE_PDF=OFF \
            -DENABLE_UTIL=OFF \
            -DENABLE_NET=OFF \
            -DENABLE_NETSSL=OFF \
            -DENABLE_CRYPTO=OFF \
            -DENABLE_DATA=ON \
            -DENABLE_DATA_SQLITE=ON \
            -DENABLE_DATA_MYSQL=OFF \
            -DENABLE_DATA_ODBC=OFF \
            -DENABLE_SEVENZIP=OFF \
            -DENABLE_ZIP=OFF \
            -DENABLE_PAGECOMPILER=OFF \
            -DENABLE_PAGECOMPILER_FILE2PAGE=OFF \
            -DENABLE_TESTS:BOOL=OFF .. \
	&& make --quiet -j $NUM_CPU \
    && make --quiet install/strip \
    && make clean \
    && cd $ROOTDIR/src

# build user-config.jam files
RUN echo "using python : 3.6 : /usr ;" > ~/user-config.jam

RUN wget https://dl.bintray.com/boostorg/release/${BOOST_VERSION_DOT}/source/boost_${BOOST_VERSION}.tar.bz2 \
    && tar --bzip2 -xf boost_${BOOST_VERSION}.tar.bz2 && cd boost_${BOOST_VERSION}  \
    && ./bootstrap.sh --prefix=$ROOTDIR \
    && ./b2 -d0 -j $NUM_CPU cxxstd=14 install variant=release link=shared  \
    && ./b2 clean \
    && cd $ROOTDIR/src

RUN wget https://github.com/fmtlib/fmt/archive/${FMT_VERSION}.tar.gz \
    && mkdir libfmt-${FMT_VERSION} && tar -xzf ${FMT_VERSION}.tar.gz -C libfmt-${FMT_VERSION} --strip-components=1 &&  cd libfmt-${FMT_VERSION} \
    && cmake -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=$ROOTDIR \
            -DFMT_DOC=OFF \
            -DFMT_TEST=OFF . \
    && make --quiet -j $NUM_CPU install/strip \
    && make clean \
    && cd $ROOTDIR/src


RUN wget http://download.osgeo.org/gdal/${GDAL_VERSION}/gdal-${GDAL_VERSION}.tar.gz \
    && tar -xvf gdal-${GDAL_VERSION}.tar.gz && cd gdal-${GDAL_VERSION} \
    && ./configure  --without-libtool --with-hide-internal-symbols \
        --with-python --with-spatialite --with-pg --with-curl --prefix=$ROOTDIR \
        --with-libtiff=internal --with-rename-internal-libtiff-symbols \
        --with-geotiff=internal --with-rename-internal-libgeotiff-symbols \
    && make --quiet -j $NUM_CPU \
    && make install \
    && make clean \
    && cd $ROOTDIR/src
RUN strip -s $ROOTDIR/lib/libgdal.so
RUN for i in $ROOTDIR/lib/python3/dist-packages/osgeo/*.so; do strip -s $i 2>/dev/null || /bin/true; done
RUN strip -s $ROOTDIR/bin/gdal_contour && strip -s $ROOTDIR/bin/gdal_grid \
    && strip -s $ROOTDIR/bin/gdal_rasterize && strip -s $ROOTDIR/bin/gdal_translate && strip -s $ROOTDIR/bin/gdaladdo \
    && strip -s $ROOTDIR/bin/gdalbuildvrt && strip -s $ROOTDIR/bin/gdaldem && strip -s $ROOTDIR/bin/gdalenhance \
    && strip -s $ROOTDIR/bin/gdalinfo && strip -s $ROOTDIR/bin/gdallocationinfo && strip -s $ROOTDIR/bin/gdalmanage \
    && strip -s $ROOTDIR/bin/gdalserver && strip -s $ROOTDIR/bin/gdalsrsinfo && strip -s $ROOTDIR/bin/gdaltindex \
    && strip -s $ROOTDIR/bin/gdaltransform && strip -s $ROOTDIR/bin/gdalwarp && strip -s $ROOTDIR/bin/gnmanalyse \
    && strip -s $ROOTDIR/bin/gnmmanage && strip -s $ROOTDIR/bin/nearblack && strip -s $ROOTDIR/bin/ogr2ogr \
    && strip -s $ROOTDIR/bin/ogrinfo && strip -s $ROOTDIR/bin/ogrlineref && strip -s $ROOTDIR/bin/ogrtindex \
    && strip -s $ROOTDIR/bin/testepsg

ENV CURL_CA_BUNDLE /etc/ssl/certs/ca-certificates.crt
ENV GDAL_DATA=/usr/local/share/gdal
ENV GDAL_HTTP_VERSION 2

RUN apt-get update -y \
    && apt-get remove -y --purge build-essential \
    && cd $ROOTDIR/src/gdal-${GDAL_VERSION}/swig/python \
    && python3 setup.py build \
    && python3 setup.py install

RUN ldconfig
RUN rm -r $ROOTDIR/src/*
